// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_itp_RCPPEXPORTS_H_GEN_
#define RCPP_itp_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace itp {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("itp", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("itp", "_itp_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in itp");
            }
        }
    }

    inline List itp_cpp(const SEXP& f, const List& pars, double& a, double& b, double& ya, double& yb, const double& epsilon, const double& k1, const double& k2, double& for_rk, double& inc) {
        typedef SEXP(*Ptr_itp_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_itp_cpp p_itp_cpp = NULL;
        if (p_itp_cpp == NULL) {
            validateSignature("List(*itp_cpp)(const SEXP&,const List&,double&,double&,double&,double&,const double&,const double&,const double&,double&,double&)");
            p_itp_cpp = (Ptr_itp_cpp)R_GetCCallable("itp", "_itp_itp_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_itp_cpp(Shield<SEXP>(Rcpp::wrap(f)), Shield<SEXP>(Rcpp::wrap(pars)), Shield<SEXP>(Rcpp::wrap(a)), Shield<SEXP>(Rcpp::wrap(b)), Shield<SEXP>(Rcpp::wrap(ya)), Shield<SEXP>(Rcpp::wrap(yb)), Shield<SEXP>(Rcpp::wrap(epsilon)), Shield<SEXP>(Rcpp::wrap(k1)), Shield<SEXP>(Rcpp::wrap(k2)), Shield<SEXP>(Rcpp::wrap(for_rk)), Shield<SEXP>(Rcpp::wrap(inc)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline double callViaXPtr(const double& x, const List& pars, SEXP xpsexp) {
        typedef SEXP(*Ptr_callViaXPtr)(SEXP,SEXP,SEXP);
        static Ptr_callViaXPtr p_callViaXPtr = NULL;
        if (p_callViaXPtr == NULL) {
            validateSignature("double(*callViaXPtr)(const double&,const List&,SEXP)");
            p_callViaXPtr = (Ptr_callViaXPtr)R_GetCCallable("itp", "_itp_callViaXPtr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_callViaXPtr(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(pars)), Shield<SEXP>(Rcpp::wrap(xpsexp)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double wiki_cpp(const double& x, const List& pars) {
        typedef SEXP(*Ptr_wiki_cpp)(SEXP,SEXP);
        static Ptr_wiki_cpp p_wiki_cpp = NULL;
        if (p_wiki_cpp == NULL) {
            validateSignature("double(*wiki_cpp)(const double&,const List&)");
            p_wiki_cpp = (Ptr_wiki_cpp)R_GetCCallable("itp", "_itp_wiki_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_wiki_cpp(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(pars)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double lambert_cpp(const double& x, const List& pars) {
        typedef SEXP(*Ptr_lambert_cpp)(SEXP,SEXP);
        static Ptr_lambert_cpp p_lambert_cpp = NULL;
        if (p_lambert_cpp == NULL) {
            validateSignature("double(*lambert_cpp)(const double&,const List&)");
            p_lambert_cpp = (Ptr_lambert_cpp)R_GetCCallable("itp", "_itp_lambert_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_lambert_cpp(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(pars)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double trig1_cpp(const double& x, const List& pars) {
        typedef SEXP(*Ptr_trig1_cpp)(SEXP,SEXP);
        static Ptr_trig1_cpp p_trig1_cpp = NULL;
        if (p_trig1_cpp == NULL) {
            validateSignature("double(*trig1_cpp)(const double&,const List&)");
            p_trig1_cpp = (Ptr_trig1_cpp)R_GetCCallable("itp", "_itp_trig1_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_trig1_cpp(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(pars)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double poly3_cpp(const double& x, const List& pars) {
        typedef SEXP(*Ptr_poly3_cpp)(SEXP,SEXP);
        static Ptr_poly3_cpp p_poly3_cpp = NULL;
        if (p_poly3_cpp == NULL) {
            validateSignature("double(*poly3_cpp)(const double&,const List&)");
            p_poly3_cpp = (Ptr_poly3_cpp)R_GetCCallable("itp", "_itp_poly3_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_poly3_cpp(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(pars)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline SEXP create_xptr(std::string fstr) {
        typedef SEXP(*Ptr_create_xptr)(SEXP);
        static Ptr_create_xptr p_create_xptr = NULL;
        if (p_create_xptr == NULL) {
            validateSignature("SEXP(*create_xptr)(std::string)");
            p_create_xptr = (Ptr_create_xptr)R_GetCCallable("itp", "_itp_create_xptr");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_create_xptr(Shield<SEXP>(Rcpp::wrap(fstr)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

}

#endif // RCPP_itp_RCPPEXPORTS_H_GEN_
